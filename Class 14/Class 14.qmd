---
title: "Class 14: RNA-Seq analysis mini-project"
author: "Jessica Gao (PID: A16939806)"
format: pdf
toc: true
---

## Background 

The data for for hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

> Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703

The authors report on differential analysis of lung fibroblasts in response to loss of the developmental transcription factor HOXA1. Their results and others indicate that HOXA1 is required for lung fibroblast and HeLa cell cycle progression. In particular their analysis show that "loss of HOXA1 results in significant expression level changes in thousands of individual transcripts, along with isoform switching events in key regulators of the cell cycle". For our session we have used their Sailfish gene-level estimated counts and hence are restricted to protein-coding genes only.

## Data Import
```{r}
counts <- read.csv("GSE37704_featurecounts.csv", row.names=1)
colData <- read.csv("GSE37704_metadata.csv")
```

## Inspect and tidy data 
```{r}
head(counts)
```

```{r}
colData
```
```{r}
colData$id
```
```{r}
colnames(counts)
```

>Q. Complete the code below to remove the troublesome first column from countData

```{r}
countData <- counts[,-1]
head(countData)
```
Check for matching countData and colData 
```{r}
colnames(countData) == colData$id
```
>Q. How many genes in total

```{r}
nrow(countData)
```
>Q. Filter to remove zero count genes (rows where there are zero counts in all columns). How many genes are left?

```{r}
to.keep.inds <- rowSums(countData) > 0 
head(to.keep.inds)
```
```{r}
new.counts <- countData[to.keep.inds, ]
```

```{r}
nrow(new.counts)
```

## Setup for DESeq 
```{r}
library(DESeq2)
```
## Run DESeq 

```{r}
dds <- DESeqDataSetFromMatrix(countData=new.counts,
                              colData=colData,
                              design=~condition)
```
```{r}
dds <- DESeq(dds)
res <- results(dds)
```
```{r}
head(res)
```
>Q. Call the summary() function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff.

```{r}
summary(res)
```

## Volcano Plot results 

```{r}
library(ggplot2)
```

>Q. Improve this plot by completing the below code, which adds color and axis labels

```{r}

mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"
```


```{r}
ggplot(res)+
  aes(log2FoldChange, -log(res$padj))+
  geom_point(col=mycols)+
  geom_hline(yintercept=0.05, col="darkgreen", linetype="dashed")+
  geom_vline(xintercept=c(2,-2), col="red", linetype="dashed")
```

## Gene annotation

>Q. Use the mapIDs() function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to our results by completing the code below.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")

columns(org.Hs.eg.db)

res$symbol = mapIds(org.Hs.eg.db,
                    keys=rownames(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=rownames(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

res$name =   mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="GENENAME",
                    multiVals="first")

head(res, 10)
```
>Q. Finally for this section let's reorder these results by adjusted p-value and save them to a CSV file in your current project directory.

```{r}
res = res[order(res$pvalue),]
write.csv(res, file="deseq_results.csv")
```


## Pathway Analysis

```{r}
library(gage)
library(gageData)
library(pathview)
```
```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

load up the KEGG 
```{r}
data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

Run pathway analysis
```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
head(keggres$less)
```


Cell Cycle figure
```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

![](hsa04110.pathview.png)

>Q. Can you do the same procedure as above to plot the pathview figures for the top 5 down-reguled pathways?

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110", kegg.native=FALSE)
```
```{r}
keggrespathways <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```
```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```
![](hsa04640.pathview.png)
![](hsa04630.pathview.png)
![](hsa04142.pathview.png)

## Gene Ontology Analysis

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
head(gobpres$less)
```


