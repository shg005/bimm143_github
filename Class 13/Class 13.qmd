---
title: "Class 13 RNA Seq (pt.1)"
author: "Jessica Gao (PID:16939806)"
format: pdf
---

Today we will analyze data from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

```{r}
library("DESeq2")
```

## Import countData and colData 

There are two datasets I need to import/read 

- 'countData' the transcript counts per gene (rows) in the different experiments.
- 'colData' information about the columns (i.e. experiments) in 'countData.'

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("airway_metadata.csv")
```

We can have a wee peak at these with 'head()'

```{r}
head(counts)
```

```{r}
metadata
```

>Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```
38694 genes 

>Q2. How many ‘control’ cell lines do we have?

```{r}
table(metadata$dex)
#or another way
sum(metadata$dex == "control")

```
There are 4 'control' cell lines

We can find the average (mean) count value per gene for all "control" experiments and compare it to the mean value for "treated." 

Step 1: extract all "Control" columns from the 'counts' data
```{r}
control.inds <- metadata$dex == "control"
control.counts <- counts[,control.inds]
```

```{r}
dim(head(control.counts))
```
Step 2: find the mean value for each gene 
Now find the row wise mean

```{r}
control.mean <- rowSums(control.counts)/4
head(control.mean)
```

This would give wrong answer if the number of control experiments changed, since we hard coded it as 4. 

>Q3. How would you make the above code in either approach more robust? Is there a function that could help here?

```{r}
control.mean <- rowSums(control.counts)/ncol(control.counts)
head(control.mean)
```
Changing the hard code 4 to the number of columns within control.counts

>Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated.inds <- metadata$dex == "treated"
treated.inds
```
```{r}
treated.counts <- counts[,treated.inds]
treated.mean <- apply(treated.counts,1,mean)
head(treated.mean)
```

Let's put these two mean values together 

```{r}
meancounts <- data.frame (control.mean, treated.mean)
head(meancounts)
```
Let's have a wee look - i.e. plot control.mean vs treated.mean

>Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.


```{r}
plot(meancounts)
```

>Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

```{r}
library(ggplot2)

ggplot(meancounts)+
  aes(control.mean, treated.mean)+
  geom_point()
```

geom_point() is being used

But there are alot of overplotting and heavily skewed, we often transform it so we can see what is going on more easily.

>Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(meancounts, log="xy")
```

We most often work in log2 units as this makes the math easier. Let's have a play to see this. 

```{r}
#control/treated
log2(20/20)
```

```{r}
log2(40/20)
```

```{r}
log2(80/20)
```

positive value means we increased the fold chain 

```{r}
log2(20/40)
```
We can now add "log2 fold-change" values to our 'meancounts' dataset.

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean / meancounts$control.mean)

head(meancounts)
```
>Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```
Having the arr.ind=TRUE will return what genes and samples have zero count genes through which(). The unique() ensures that no rows nor columns are counted twice if they have zero in the samples. 

We need to filter out zero count genes - i.e. remove the rows (genes) that have a 0 value in either countorl. Get rid of NaN and -Inf.

>Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

>Q8. How many genes are "up" regulated at the common log2 fold-change threshold of +2.

```{r}
up.inds <- meancounts$log2fc >= 2
sum(up.inds, na.rm=T)
```
>Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

>Q9. How many genes are "down" regulated at the threshold of -2?

```{r}
down.inds <- meancounts$log2fc <= -2
sum(down.inds, na.rm=T)
```

>Q10. Do you trust these results? Why or why not?

No, I do not trust these results, it is difficult to tell the difference between the treated and control base on log fold chains. 

## DESeq2 analysis

To do this the right way we need to consider the significance of the differences not just their magnitude

```{r}
#/ message: false
library(DESeq2)
```

To use this package it wants countsData and colData in a specific format.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata,
                       design = ~dex)
```
```{r}
dds <- DESeq(dds)

```
Extract my results
```{r}
res <- results(dds)
head(res)
```
Plot of fold-change vs P-value (adjusted for multiple testing)
```{r}
plot(res$log2FoldChange, res$padj)
```

Very skewed, so take the log of the p value 

```{r}
plot(res$log2FoldChange, log(res$padj))
```

higher negative number means smaller p value 

Look down on the axis is how to analyze it 

We can just flip that y-axis by putting a negative in front of y variable

```{r}
plot(res$log2FoldChange, -log(res$padj),
     xlab="Log2 Fold-change",
     ylab="-log(adjP-value)")
```

Let's save our work to date 

```{r}
write.csv(res, file="myresults.csv")
```

We are gonna make the points on the vocalno plot colored to show what is upregulated and what is downregulated.
Add the log2 threshold lines at +2 and -2 
Add p-value threshold lines at 0.05
Add color to highlight the subset of genes that meet both of the above thresholds. 
Make with ggplot.

```{r}
mycols <- rep("gray", nrow(res))
mycols[which(res$log2FoldChange >= 2)] <- "red" 
mycols[which(res$log2FoldChange <= -2)] <- "blue"
mycols[res$padj > 0.05] <- "gray"

table(mycols)
```


```{r}
ggplot(res)+
  aes(log2FoldChange, -log(res$padj))+
  geom_point(col=mycols)+
  geom_hline(yintercept=0.05, col="darkgreen", linetype="dashed")+
  geom_vline(xintercept=c(2,-2), col="red", linetype="dashed")
```

## Add gene annotation data

Now the question is what are the blue points in the above volcano plot - i.e. what are the genes most influenced by drug treatment here?

```{r}
head(res)
```

We will use some BioCOnductor packages to "map" the ENSEMBLE ids to more useful gene SYMBOL names/ids. 

We can install these packages with:
'BiocManager::install("AnnotationDbi")'
```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```
What database identifiers can I translate between here:
```{r}
columns(org.Hs.eg.db)
```

We can now use the 'mapIDs()' function to translate/map between these different identifier formats. 

>Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

Let's add SYMBOL, GENENNAME, and ENTREZID 
```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                    keys=rownames(res),
                    keytype="ENSEMBL",
                    column="SYMBOL")
res$genename <- mapIds(org.Hs.eg.db,
                    keys=rownames(res),
                    keytype="ENSEMBL",
                    column="GENENAME")
res$entrez <- mapIds(org.Hs.eg.db,
                    keys=rownames(res),
                    keytype="ENSEMBL",
                    column="ENTREZID")
head(res)
```
## Pathway analysis
Now I know the gene names and their IDs in different databases I want to know what type of biology they are involved in...

This is the job of "pathway analysis" (a.k.a. "gene set enrichment")

There are tones of different BioCOnductor packages for pathway analysis here we use just one of them called **gage**, and **pathview**.I will install these packages with 'BiocManager::install(c("gage","pathview", "gageData"))'

```{r}
library(gage)
library(gageData)
library(pathview)
```
Load up the KEGG genesets
```{r}
data(kegg.sets.hs)
```

```{r}
head(kegg.sets.hs, 2)
```

We will use these KEGG genesets (a.k.a. pathways) and our 'res' results to see what overlaps. To do this we will use the 'gage()' function. 

For input 'gage()' wants just a vector of importance - in our case FoldChange values. 

```{r}
foldchanges <- res$log2FoldChange
```
Vectors in R can have "names" that are useful for bookkeeping so we know what a given value correspond to, e.g.

Let's put names on our 'foldchanges' vector - here we will use 'res$entrez'
```{r}
names(foldchanges) <- res$entrez 
```

Now we can run "pathway analysis"
```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
head(keggres$less)
```

We can get a pathway image file with our genesets highlighted via the 'pathview()' function.

```{r}
pathview(foldchanges, pathway.id = "hsa05310")
```
Insert this figure in my report
![](hsa05310.pathview.png)
>Q12. Can you do the same procedure as above to plot the pathview figures for the top 2 down-reguled pathways?


